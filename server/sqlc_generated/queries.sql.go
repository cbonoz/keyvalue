// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sqlc_generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO api_keys (app_id, key)
VALUES ($1, $2)
RETURNING id, app_id, key, created_at, last_used, deleted_at
`

type CreateAPIKeyParams struct {
	AppID int32
	Key   string
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, createAPIKey, arg.AppID, arg.Key)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.AppID,
		&i.Key,
		&i.CreatedAt,
		&i.LastUsed,
		&i.DeletedAt,
	)
	return i, err
}

const createApp = `-- name: CreateApp :one
INSERT INTO apps (created_by_user_id, name, created_at, updated_at)
VALUES ($1, $2, NOW(), NOW())
RETURNING id, created_by_user_id, name, created_at, updated_at, deleted_at
`

type CreateAppParams struct {
	CreatedByUserID pgtype.UUID
	Name            string
}

func (q *Queries) CreateApp(ctx context.Context, arg CreateAppParams) (App, error) {
	row := q.db.QueryRow(ctx, createApp, arg.CreatedByUserID, arg.Name)
	var i App
	err := row.Scan(
		&i.ID,
		&i.CreatedByUserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteKeyValue = `-- name: DeleteKeyValue :exec
DELETE FROM key_values WHERE app_id = $1 AND key = $2
`

type DeleteKeyValueParams struct {
	AppID int32
	Key   string
}

func (q *Queries) DeleteKeyValue(ctx context.Context, arg DeleteKeyValueParams) error {
	_, err := q.db.Exec(ctx, deleteKeyValue, arg.AppID, arg.Key)
	return err
}

const getAPIKey = `-- name: GetAPIKey :one

SELECT id, app_id, key, created_at, last_used, deleted_at FROM api_keys WHERE key = $1 AND is_active = true
`

func (q *Queries) GetAPIKey(ctx context.Context, key string) (ApiKey, error) {
	row := q.db.QueryRow(ctx, getAPIKey, key)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.AppID,
		&i.Key,
		&i.CreatedAt,
		&i.LastUsed,
		&i.DeletedAt,
	)
	return i, err
}

const getApp = `-- name: GetApp :one
SELECT id, created_by_user_id, name, created_at, updated_at, deleted_at FROM apps WHERE id = $1
`

func (q *Queries) GetApp(ctx context.Context, id int32) (App, error) {
	row := q.db.QueryRow(ctx, getApp, id)
	var i App
	err := row.Scan(
		&i.ID,
		&i.CreatedByUserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getKeyValue = `-- name: GetKeyValue :one
SELECT app_id, key, value, created_at, updated_at, deleted_at FROM key_values WHERE app_id = $1 AND key = $2
`

type GetKeyValueParams struct {
	AppID int32
	Key   string
}

func (q *Queries) GetKeyValue(ctx context.Context, arg GetKeyValueParams) (KeyValue, error) {
	row := q.db.QueryRow(ctx, getKeyValue, arg.AppID, arg.Key)
	var i KeyValue
	err := row.Scan(
		&i.AppID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listKeyValues = `-- name: ListKeyValues :many
SELECT app_id, key, value, created_at, updated_at, deleted_at FROM key_values WHERE app_id = $1
`

func (q *Queries) ListKeyValues(ctx context.Context, appID int32) ([]KeyValue, error) {
	rows, err := q.db.Query(ctx, listKeyValues, appID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KeyValue
	for rows.Next() {
		var i KeyValue
		if err := rows.Scan(
			&i.AppID,
			&i.Key,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserApps = `-- name: ListUserApps :many
SELECT id, created_by_user_id, name, created_at, updated_at, deleted_at FROM apps WHERE created_by_user_id = $1
`

func (q *Queries) ListUserApps(ctx context.Context, createdByUserID pgtype.UUID) ([]App, error) {
	rows, err := q.db.Query(ctx, listUserApps, createdByUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []App
	for rows.Next() {
		var i App
		if err := rows.Scan(
			&i.ID,
			&i.CreatedByUserID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAPIKeyLastUsed = `-- name: UpdateAPIKeyLastUsed :exec
UPDATE api_keys SET last_used = NOW() WHERE id = $1
`

func (q *Queries) UpdateAPIKeyLastUsed(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, updateAPIKeyLastUsed, id)
	return err
}

const upsertKeyValue = `-- name: UpsertKeyValue :one
INSERT INTO key_values (app_id, key, value, updated_at)
VALUES ($1, $2, $3, NOW())
ON CONFLICT (app_id, key)
DO UPDATE SET value = EXCLUDED.value, updated_at = NOW()
RETURNING app_id, key, value, created_at, updated_at, deleted_at
`

type UpsertKeyValueParams struct {
	AppID int32
	Key   string
	Value string
}

func (q *Queries) UpsertKeyValue(ctx context.Context, arg UpsertKeyValueParams) (KeyValue, error) {
	row := q.db.QueryRow(ctx, upsertKeyValue, arg.AppID, arg.Key, arg.Value)
	var i KeyValue
	err := row.Scan(
		&i.AppID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
